// Code generated by go-bindata.
// sources:
// vendor/CREDITS
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vendorCredits = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xdf\x6f\xdb\xba\x15\xc7\xdf\xf9\x57\x1c\xf4\xa9\x19\x04\xa7\xb9\xb7\xbb\x5b\x7b\x91\x07\x5a\xa2\x6d\x62\x32\xe9\x91\x74\x32\x3f\x0d\xb2\x44\x47\xdc\x64\xd1\x20\xa9\x06\xfe\xef\x07\x52\x4a\xec\xb4\xb9\x1b\x30\xa0\x79\x89\x4c\xf2\xfc\xfa\x92\xe7\x73\xee\x7f\xda\x1f\xba\x87\xb9\xe9\x9d\x3e\x41\x67\x6a\xdd\x7b\xdd\xc0\xd0\x37\xda\x7d\x85\x7b\xd4\x86\x70\xf2\x5f\x6f\x6f\x9f\x4c\x68\x87\xfd\xac\xb6\xc7\xdb\xf3\x30\xfc\xdb\xdc\xee\x93\xc5\x2d\x42\xaa\xd5\xb0\xa6\x0a\xca\xd1\x16\x3e\xae\xa9\xba\x41\x28\xb7\xa7\xb3\x33\x4f\x6d\x80\x8f\xf5\x0d\xfc\xf2\xe9\xee\x2f\x70\xfe\x67\xb4\x44\x68\xa3\xdd\xd1\x78\x6f\x6c\x0f\xc6\x43\xab\x9d\xde\x9f\xe1\xc9\x55\x7d\xd0\x4d\x06\x07\xa7\x35\xd8\x03\xd4\x6d\xe5\x9e\x74\x06\xc1\x42\xd5\x9f\xe1\xa4\x9d\xb7\x3d\xd8\x7d\xa8\x4c\x6f\xfa\x27\xa8\xa0\xb6\xa7\x33\xb2\x07\x08\xad\xf1\xe0\xed\x21\x3c\x57\x4e\x43\xd5\x37\x50\x79\x6f\x6b\x53\x05\xdd\x40\x63\xeb\xe1\xa8\xfb\x50\x85\x18\xef\x60\x3a\xed\xe1\x63\x68\x35\x7c\x90\x93\xc5\x87\x9b\x14\xa4\xd1\x55\x87\x4c\x0f\x71\xef\x65\x0b\x9e\x4d\x68\xed\x10\xc0\x69\x1f\x9c\xa9\xa3\x8f\x0c\x4c\x5f\x77\x43\x13\x73\x78\xd9\xee\xcc\xd1\x4c\x11\xa2\x79\xaa\xdb\xa3\x60\x61\xf0\x3a\x4b\x79\x66\x70\xb4\x8d\x39\xc4\xff\x3a\x95\x75\x1a\xf6\x9d\xf1\x6d\x06\x8d\x89\xae\xf7\x43\xd0\x19\xf8\xb8\x98\x64\xcc\x62\x1d\xb7\xd6\x81\xd7\x5d\x87\x6a\x7b\x32\xda\x43\xaa\xf5\x92\x5d\x3a\x13\x53\x3f\x45\x41\xc3\x24\x91\x8f\x2b\xcf\xad\x3d\xbe\xad\xc4\x78\x74\x18\x5c\x6f\x7c\xab\x93\x4d\x63\xc1\xdb\x14\xf1\x5f\xba\x0e\x71\x25\x1e\x3f\xd8\xae\xb3\xcf\xb1\xb4\xda\xf6\x8d\x89\x15\xf9\xaf\xe3\x1d\x57\x7b\xfb\x4d\xa7\x5a\xc6\x6b\xed\x6d\x30\xf5\x28\x77\xba\x80\xd3\xe5\x56\xa7\x2d\xdf\x56\x5d\x07\x7b\x3d\x09\xa6\x1b\x30\x3d\x54\x57\xe5\xb8\x18\xde\x87\xaa\x0f\xa6\xea\xe0\x64\x5d\x8a\xf7\x7d\x99\x33\x84\xd4\x8a\x80\xe4\x0b\xf5\x88\x05\x01\x2a\x61\x23\xf8\x03\x2d\x48\x01\x1f\xb0\x04\x2a\x3f\x64\xf0\x48\xd5\x8a\x6f\x15\x3c\x62\x21\x30\x53\x3b\xe0\x0b\xc0\x6c\x07\x7f\xa3\xac\xc8\x80\xfc\x63\x23\x88\x94\xc0\x05\xa2\xeb\x4d\x49\x49\x91\x01\x65\x79\xb9\x2d\x28\x5b\xc2\x7c\xab\x80\x71\x05\x25\x5d\x53\x45\x0a\x50\x1c\x62\xc0\xc9\x15\x25\x32\x3a\x5b\x13\x91\xaf\x30\x53\x78\x4e\x4b\xaa\x76\x19\x5a\x50\xc5\xa2\xcf\x05\x17\x80\x61\x83\x85\xa2\xf9\xb6\xc4\x02\x36\x5b\xb1\xe1\x92\x00\x66\x05\x30\xce\x28\x5b\x08\xca\x96\x64\x4d\x98\x9a\x01\x65\xc0\x38\x90\x07\xc2\x14\xc8\x15\x2e\xcb\x18\x0a\xe1\xad\x5a\x71\x11\xf3\x83\x9c\x6f\x76\x82\x2e\x57\x0a\x56\xbc\x2c\x88\x90\x30\x27\x50\x52\x3c\x2f\xc9\x18\x8a\xed\x20\x2f\x31\x5d\x67\x50\xe0\x35\x5e\x92\x64\xc5\xd5\x8a\x08\x14\x8f\x8d\xd9\xc1\xe3\x8a\xc4\xa5\x18\x0f\x33\xc0\xb9\xa2\x9c\xc5\x32\x72\xce\x94\xc0\xb9\xca\x40\x71\xa1\x5e\x4d\x1f\xa9\x24\x19\x60\x41\x65\x14\x64\x21\xf8\x3a\x43\x51\x4e\xbe\x88\x47\x28\x8b\x76\x8c\x8c\x5e\xa2\xd4\xf0\xe6\x46\xb8\x48\xbf\xb7\x92\xbc\x3a\x84\x82\xe0\x92\xb2\xa5\x8c\xc6\xb1\xc4\x97\xc3\x33\x84\xee\xa1\xa4\x39\x61\x92\xc0\x97\xfd\xdd\xdd\xe1\x70\xf8\xe5\xd7\x5f\xf5\xa7\xfd\xe7\xbb\xc3\x6f\xfb\x3f\x37\xf5\x6f\x7f\xbd\xd3\x9f\xbf\xe8\xcf\x9f\xbe\x68\xf4\x13\xa1\x87\xee\x61\x69\x47\x14\xc4\x27\xd8\x54\xae\x81\xce\xec\x5d\xe5\xce\x37\xff\x0d\x84\xb6\xab\xfa\xa7\x99\x75\x4f\xb7\x3f\x42\xee\xd3\x17\x88\xad\xb2\xb4\x80\x87\xd0\x5a\xe7\x67\x80\xbb\x6e\xe2\x41\x84\x88\x76\xdf\x74\x33\x43\x48\xe8\xd7\xb6\x8f\x0d\x13\x9b\x68\xf0\xb1\x51\xc0\xdb\xc1\x4d\x6d\xb5\x37\x7d\xe5\xce\x70\xb0\xee\xe8\xb3\xc4\x9a\xd8\x32\x13\x73\x50\xe2\x89\xa9\xab\x91\x49\xb1\xc5\x47\x0c\x44\xe8\x9d\x9c\xfd\x66\x62\xc3\x85\xb6\x0a\x7f\xd8\xd8\xd1\x08\x1d\x75\xf8\x8a\x10\x00\xfc\x09\xde\x26\x95\xfa\x70\xca\xa6\xb6\x8d\x86\xe3\xe0\x23\x08\x23\x7f\x93\xcb\xef\x80\x80\xc6\xae\xcf\x46\x1a\x74\xc6\x87\x44\xf1\xab\x68\x89\x14\xd7\xa9\x34\xc6\xd7\x5d\x65\x8e\xda\xcd\xde\xcf\xc0\xf4\xd7\x22\xbc\x64\x70\x72\xb6\x19\x6a\x7d\x49\x02\x7d\x4f\xa5\xff\x2f\x89\x17\xfa\xbf\x1d\x19\x13\x87\x6d\x68\xb5\x83\x63\x15\xb4\x33\x55\xe7\x2f\x12\xa7\x7b\x09\xad\x46\xd7\xa9\x4f\xf5\x30\x6d\x92\x59\xf4\xda\x57\xc7\x34\xd7\x96\xd6\x3e\x75\x1a\x68\x5f\xcf\xa0\xb7\x97\xbd\xa4\xb7\x09\x1e\xd5\xb6\x1f\xfd\x58\xe7\xe1\x58\x9d\x23\x41\x07\x3f\x52\x5b\xf7\x8d\x75\x5e\xc7\x77\x70\x72\xf6\x68\x83\x86\x51\x8d\xe0\xa1\xd1\xce\x7c\xd3\x0d\x1c\x9c\x3d\xa2\xb7\x33\xf1\x65\x4e\xf9\x93\xae\xe3\xa3\x81\x93\x33\xf1\x29\xb9\xf8\x5c\xfa\x2b\x74\x27\xd6\x52\xf9\x3e\x6c\xe7\xbb\xd4\xe6\x3f\x12\x2a\x92\x2e\x81\x85\xce\xb7\x8a\x0b\x89\x26\x2c\xa7\x8d\x08\xac\x0b\x7f\x61\xe2\xef\x15\x5d\xaf\x50\x9c\xbd\xb0\x18\x5d\x58\x9c\xa5\xa0\x3f\x9a\xbd\x03\xe5\x14\xef\x8a\xcb\xe8\x7d\x2e\x0b\x02\x05\x95\x09\xa2\xa4\xf8\x03\x24\x5f\xaa\x44\xfc\x91\x11\x31\xa2\xf9\x52\xe2\x3b\x54\x2e\xa8\x20\x11\xac\x94\x5d\xbe\x72\x5a\x10\xa6\x70\x99\x21\xb9\x21\x39\xc5\x65\x9c\x45\x64\xbd\x29\xb1\xd8\x65\x93\x4f\x49\xfe\xbe\x25\x4c\x51\x5c\xbe\x12\xfd\xe3\xff\x50\x64\x23\x78\xbe\x15\x69\xa4\x44\x19\xe4\x76\x2e\x15\x55\x5b\x45\x60\xc9\x79\x91\x74\x96\x44\x3c\xd0\x9c\xc8\xdf\xa1\xe4\x32\x89\xb5\x95\x24\x43\x05\x56\x38\x05\xde\x08\xbe\xa0\x4a\xfe\x1e\xbf\xe7\x5b\x49\x93\x66\x94\x29\x22\xc4\x76\x13\x39\x7f\x03\x2b\xfe\x48\x1e\x88\x80\x1c\x6f\x25\x29\x92\xb8\x3c\x8e\x93\x5d\x9c\xc7\x5c\xa4\x19\xfb\xfe\xc8\xb9\x4c\x19\xa9\x04\xcd\xd5\xf5\xb1\x38\x2c\xb8\x50\xe8\x52\x23\x30\xb2\x2c\xe9\x92\xb0\x9c\xbc\x19\x48\x37\xaf\x03\x29\x4d\xb1\x1d\x3c\xe2\x1d\x4c\x53\x69\x9a\x37\x28\x7d\x5e\x3d\xd8\x2c\x5d\x24\xd0\x05\xe0\xe2\x81\xc6\xb4\xa7\xc3\x1b\x2e\x25\x9d\x9e\x49\x92\x2c\x5f\x4d\x72\xc7\x89\xf4\x13\xc7\xcc\x7f\x02\x00\x00\xff\xff\x2e\x8e\x7f\xdd\xb8\x0b\x00\x00")

func vendorCreditsBytes() ([]byte, error) {
	return bindataRead(
		_vendorCredits,
		"vendor/CREDITS",
	)
}

func vendorCredits() (*asset, error) {
	bytes, err := vendorCreditsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vendor/CREDITS", size: 3000, mode: os.FileMode(420), modTime: time.Unix(1509936724, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vendor/CREDITS": vendorCredits,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"vendor": &bintree{nil, map[string]*bintree{
		"CREDITS": &bintree{vendorCredits, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

